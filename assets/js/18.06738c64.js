(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{287:function(t,e,n){"use strict";n.r(e);var o=n(5),a=Object(o.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("Now this is a cute little devil. A wifi enabled micro controller in an SD package, with onboard support for various digital I/O. First I didn't quite get it, but after 10 minutes pondering I had an "),n("a",{attrs:{href:"https://www.google.com/search?q=light+bulb&hl=sv&client=safari&tbo=u&rls=en&tbm=isch&source=univ&sa=X&ei=9yTCUOqzOYe5hAfQ6YCQAQ&sqi=2&ved=0CDQQsAQ&biw=1151&bih=1088",target:"_blank",rel:"noopener noreferrer"}},[t._v("Edison moment"),n("OutboundLink")],1),t._v(" and immediately ordered two more to toy with.")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://dl.dropbox.com/u/2932762/images/pWRL-11395l.jpg",alt:"Electric imp"}})]),t._v(" "),n("p",[n("em",[t._v("Bring Wifi to Everything")]),t._v(" is the motto and with the imp it's easy to do so. Just create an account on "),n("a",{attrs:{href:"http://electricimp.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("electricimp.com"),n("OutboundLink")],1),t._v(", put the imp in a break-out board for development (or a future ready-made thing that supports it), and power it up. First time you need to supply wifi login information and this is done with an as cute as clever solution; an iOS or Android app transfers the login information by blinking it's screen for a light sensor in the imp. As soon as it has the correct info, it will connect to the cloud service, update itself to latest firmware and pair with your account. Very neat!")]),t._v(" "),n("p",[t._v("To program it you use the web based applications at "),n("a",{attrs:{href:"http://electricimp.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("electricimp.com"),n("OutboundLink")],1),t._v(". Basically, you write one program for each imp, deploy it on the hardware and optionally connects the input and output from the imp to ready-made software modules that electric imp provides.")]),t._v(" "),n("p",[t._v("The system is still in early stage and there are not that many ready-made software modules yet. But it's easy to write your own software and the chosen language for the imp is Squirrel, which seems an excellent choice. It is powerful and shouldn't be hard to learn if you have some knowledge of C or C++.")]),t._v(" "),n("h2",{attrs:{id:"first-project"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#first-project"}},[t._v("#")]),t._v(" First project!")]),t._v(" "),n("p",[t._v("As always, I use my summer house as an excuse to test new things and I want to use the imp for remotely controlling the heating system so I can arrive to a warm and cosy cottage. The imp should enable remote control through a RESTful web service, and it shall log temperature and humidity to Cosm, or possibly to a database.")]),t._v(" "),n("p",[t._v("The heating control only needs an open output pin that can sink/short circuit a loop in the thermostat that talks with the radiators. The code for this is very simple, I wrote this class:")]),t._v(" "),n("div",{staticClass:"language-squirrel extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class SwitchInput extends InputPort {\n    name = "Heating switch";\n    type = "0 or 1";\n\n    constructor() {\n        base.constructor();\n    \n        // Configure pin 1 as an open drain output with internal pull up\n        hardware.pin1.configure(DIGITAL_OUT_OD_PULLUP);\n    }\n \n    function set(value) {\n        // Reflect state to the value = 1 should pull output low,\n        // with switches radiators from "away" to "at home" mode. \n        hardware.pin1.write(value == 1 ? 0 : 1);\n        server.show(value);\n    }\n}\n~~~\n\nPlus a few lines for instantiating the class and get the imp going. This defines an input to the imp and using the so called "planner" on electricimp.com I connected the input to a module for http. The module provides a unique URL over https for POSTing a switch value to the imp. When I have my sensor in place an output from the imp will be connected to [Cosm](http://cosm.com) for data logging. This is what the complete "plan" for  this imp will be:\n\n![plan](https://dl.dropbox.com/u/2932762/images/planner.png)\n\nThe planner makes it drop-dead easy to connect your imp and it kindly reminds you to provide all needed information. In this case I haven\'t provided the API keys to Cosm yet.\n\nMy first idea was that temperature and humidity measurement should be done with an [RHT03 element](https://www.sparkfun.com/products/10167) which outputs readings with a single pin digital interface. It\'s a low cost device, easy to integrate, but it turned out that the imp is too slow for handling the sensor\'s digital interface. At least with the current implementation to sample input pins. So I scrapped that idea and will use an I2C-connected sensor instead. The imp has inbuilt support for I2C so that should be easy. I\'ll update this page when I get the new sensor.\n\nNext up is writing an iPhone app that shows a graph of current temperature and humidity and gives you a handy way to toggle the heating between Home and Away mode.')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);